Auto-generate SystemVerilog code for
1. Clocking logic.
2. Constraints file.
3. sequential and combinational logic in always_ff and always_comb blocks respectively.
4. Top SystemVerilog file for running specific snippets on an FPGA/simulation quickly.

Language constructs that would be good to add
1. if-else
2. functions within snippets

Other support:
1. A way to specify different kinds of interfaces between snippets (can borrow
techniques from Connectal).
2. Assertions.
3. printfs/display statements.
4. Even if the user specifies the pipelining boundaries, there's quite some
grunt work involved in the actual pipelining. Automating this grunt work would
be useful.
5. Mock frameworks to short-circuit the functionality of some FPGA modules for quick testing.

Speed up:
1. Syntax checking.
2. Type/semantic checking.
3. Design space exploration.
4. Synthesis.
5. Out-of-context synthesis.

Testing:
1. Check correspondence with a previous version (the idea of refinements).
2. Formal, fuzzy, or approximate checks.
